/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 09 13:46:57 GMT 2023
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.jimfs.BasicAttributeProvider;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.JimfsPath;
import com.google.common.jimfs.Name;
import com.google.common.jimfs.PathNormalization;
import com.google.common.jimfs.PathService;
import com.google.common.jimfs.SystemJimfsFileSystemProvider;
import com.google.common.jimfs.WindowsPathType;
import java.lang.reflect.Array;
import java.net.URI;
import java.nio.file.AccessMode;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystemNotFoundException;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileAttributeView;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SystemJimfsFileSystemProvider_ESTest extends SystemJimfsFileSystemProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      HashMap<String, BasicAttributeProvider.Attributes> hashMap0 = new HashMap<String, BasicAttributeProvider.Attributes>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem((Path) null, (Map<String, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      HashMap<String, BasicAttributeProvider.Attributes> hashMap0 = new HashMap<String, BasicAttributeProvider.Attributes>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem((URI) null, (Map<String, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getPath((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getPath(uRI0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.net.URISyntaxException: Expected scheme-specific part at index 5: file:
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getFileSystem(uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // file:///tmp/foo.bar
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getFileSystem((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      HashMap<String, PathNormalization> hashMap0 = new HashMap<String, PathNormalization>();
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // env map (java.util.HashMap@0000000002) must contain key 'java.lang.String@0000000003' mapped to an instance of java.lang.Class@0000000004
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("http", "http", "", "#L", "http");
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uri (java.net.URI@0000000002) may not have a path, query or fragment
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("ftp", "ftp", "ftp");
      HashMap<String, FileAttributeView> hashMap0 = new HashMap<String, FileAttributeView>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uri (java.net.URI@0000000002) may not have a path, query or fragment
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, PathNormalization> hashMap0 = new HashMap<String, PathNormalization>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uri (java.net.URI@0000000002) may not have a path, query or fragment
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getPath(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uri must have a path: java.net.URI@0000000002
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getFileStore((Path) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.delete((Path) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.isSameFile((Path) null, (Path) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      Configuration configuration0 = Configuration.osX();
      PathService pathService0 = new PathService(configuration0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "jimfs";
      stringArray0[1] = "jimfs";
      stringArray0[2] = "jimfs";
      stringArray0[3] = "jimfs";
      stringArray0[4] = "jimfs";
      stringArray0[5] = "jimfs";
      JimfsPath jimfsPath0 = pathService0.parsePath("jimfs", stringArray0);
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newByteChannel(jimfsPath0, (Set<? extends OpenOption>) null, (FileAttribute<?>[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.move((Path) null, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      String string0 = systemJimfsFileSystemProvider0.getScheme();
      assertEquals("jimfs", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.copy((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.create("maxSize");
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getPath(uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // 
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      FileAttribute<BasicAttributeProvider.Attributes>[] fileAttributeArray0 = (FileAttribute<BasicAttributeProvider.Attributes>[]) Array.newInstance(FileAttribute.class, 0);
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.createDirectory((Path) null, fileAttributeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      MockFile mockFile0 = new MockFile("jimfs");
      Path path0 = mockFile0.toPath();
      Class<FileAttributeView> class0 = FileAttributeView.class;
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getFileAttributeView(path0, class0, linkOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      Configuration configuration0 = Configuration.osX();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.PARENT;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.setAttribute(jimfsPath0, "v1yAX3)", configuration0, linkOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      PriorityQueue<PathNormalization> priorityQueue0 = new PriorityQueue<PathNormalization>();
      PathService pathService0 = new PathService(windowsPathType0, priorityQueue0, priorityQueue0, true);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newDirectoryStream(jimfsPath0, (DirectoryStream.Filter<? super Path>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      Class<BasicAttributeProvider.Attributes> class0 = BasicAttributeProvider.Attributes.class;
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.readAttributes((Path) null, class0, (LinkOption[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.checkAccess((Path) null, (AccessMode[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Runnable runnable0 = SystemJimfsFileSystemProvider.removeFileSystemRunnable(uRI0);
      assertNotNull(runnable0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      MockFile mockFile0 = new MockFile("com.google.common.collect.ImmutableSortedMap");
      Path path0 = mockFile0.toPath();
      HashMap<String, BasicAttributeProvider.Attributes> hashMap0 = new HashMap<String, BasicAttributeProvider.Attributes>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(path0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.isHidden((Path) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.readAttributes((Path) null, "dU@3U2", (LinkOption[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }
}
