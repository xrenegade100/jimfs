/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 09 13:50:05 GMT 2023
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.jimfs.Util;
import java.util.HashSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.clear((byte[][]) null, (-214), 8192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Util.checkNotNegative(0L, "~IIPr(4");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Util.zero(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[][] byteArray0 = new byte[4][5];
      Util.clear(byteArray0, (byte)0, (byte)0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Util.smearHash(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = Util.smearHash((-862048943));
      assertEquals((-957999104), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = Util.nextPowerOf2((-2556));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.zero((byte[]) null, (-1690), (-1690));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      hashSet0.add((Integer) null);
      // Undeclared exception!
      try { 
        Util.checkNoneNull(hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.clear((byte[][]) null, 2298, 2126221433);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][8];
      // Undeclared exception!
      try { 
        Util.clear(byteArray0, 1332, 1332);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Util.zero(byteArray0, 1480, 32768);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Util.zero(byteArray0, 32768, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableSortedMultiset<Integer> immutableSortedMultiset0 = ImmutableSortedMultiset.of(integer0, integer0);
      Vector<Object> vector0 = new Vector<Object>(immutableSortedMultiset0);
      Util.checkNoneNull(vector0);
      assertEquals(2, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.checkNoneNull((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      ImmutableSortedMultiset<BoundType> immutableSortedMultiset0 = ImmutableSortedMultiset.of(boundType0);
      Util.checkNoneNull(immutableSortedMultiset0);
      assertTrue(immutableSortedMultiset0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Util.checkNotNegative(328016483, "h<pjh_d0~Y");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.checkNotNegative((-2556), "%s must not be negative: %s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String@0000000001 must not be negative: java.lang.Long@0000000002
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = Util.nextPowerOf2(2126221433);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = Util.nextPowerOf2(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = Util.nextPowerOf2(32768);
      assertEquals(32768, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = Util.smearHash(2298);
      assertEquals(328016483, int0);
  }
}
