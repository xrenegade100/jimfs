/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 09 13:53:22 GMT 2023
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.jimfs.DowngradedSeekableByteChannel;
import java.io.FileDescriptor;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DowngradedSeekableByteChannel_ESTest extends DowngradedSeekableByteChannel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("pVlqwp.R;", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      SeekableByteChannel seekableByteChannel0 = downgradedSeekableByteChannel0.truncate(1054L);
      assertEquals(0L, seekableByteChannel0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J8dt\"PFR7@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      SeekableByteChannel seekableByteChannel0 = downgradedSeekableByteChannel0.position(3496L);
      assertEquals(0L, seekableByteChannel0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J8dt\"PFR7@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("J8dt\"PFR7@");
      downgradedSeekableByteChannel0.write(byteBuffer0);
      int int0 = downgradedSeekableByteChannel0.write(byteBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("pVlqwp.R;", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      downgradedSeekableByteChannel0.write(byteBuffer0);
      long long0 = downgradedSeekableByteChannel0.size();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      java.io.File file0 = MockFile.createTempFile("]<t|", "]<t|", (java.io.File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      int int0 = downgradedSeekableByteChannel0.read(byteBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(1L);
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel1);
      long long0 = downgradedSeekableByteChannel0.position();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("oTF93g-hW<Za-g", "Cv");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      downgradedSeekableByteChannel0.close();
      boolean boolean0 = downgradedSeekableByteChannel0.isOpen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        downgradedSeekableByteChannel0.write(byteBuffer0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?0DVSN/.@bS", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      downgradedSeekableByteChannel0.close();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(170);
      try { 
        downgradedSeekableByteChannel0.write(byteBuffer0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("pVlqwp.R;", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      // Undeclared exception!
      try { 
        downgradedSeekableByteChannel0.write((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      // Undeclared exception!
      try { 
        downgradedSeekableByteChannel0.truncate(2010L);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      downgradedSeekableByteChannel0.close();
      try { 
        downgradedSeekableByteChannel0.truncate((-3890L));
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Q6*Pu%?)5u=|VZg>!Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      try { 
        downgradedSeekableByteChannel0.truncate(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      try { 
        downgradedSeekableByteChannel0.size();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      java.io.File file0 = MockFile.createTempFile("]<t|", "]<t|", (java.io.File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      downgradedSeekableByteChannel0.close();
      try { 
        downgradedSeekableByteChannel0.read((ByteBuffer) null);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      // Undeclared exception!
      try { 
        downgradedSeekableByteChannel0.read((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      try { 
        downgradedSeekableByteChannel0.read(byteBuffer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("D2ywz?", "invalid attributes: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      fileChannel0.close();
      try { 
        downgradedSeekableByteChannel0.position(4294967296L);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "com.google.common.jimfs.DowngradedSeekableByteChannel");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        downgradedSeekableByteChannel0.position(1977L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      downgradedSeekableByteChannel0.close();
      try { 
        downgradedSeekableByteChannel0.position();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Q6*Pu%?)5u=|VZg>!Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      try { 
        downgradedSeekableByteChannel0.position();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = null;
      try {
        downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel((FileChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      long long0 = downgradedSeekableByteChannel0.position();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-'37#XmeRB4IcxEC", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      // Undeclared exception!
      try { 
        downgradedSeekableByteChannel0.read((ByteBuffer) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")O8\";9B", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      downgradedSeekableByteChannel0.close();
      try { 
        downgradedSeekableByteChannel0.size();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^[a-zA-Z]:([^\\].*)?$", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      boolean boolean0 = downgradedSeekableByteChannel0.isOpen();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      // Undeclared exception!
      try { 
        downgradedSeekableByteChannel0.truncate((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")O8\";9B", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      long long0 = downgradedSeekableByteChannel0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      DowngradedSeekableByteChannel downgradedSeekableByteChannel0 = new DowngradedSeekableByteChannel(fileChannel0);
      // Undeclared exception!
      try { 
        downgradedSeekableByteChannel0.position((-1820L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }
}
